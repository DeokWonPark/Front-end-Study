/**
 * 비동기 프로그래밍
 */


// 동기처리와 비동기 처리
// 함수를 호출하면 함수 코드가 평가되어 실행 컨텍스트가 생성된다.
// 실행 컨텍스트는 콜스택이라 불리는 실행 컨텍스트 스택에 푸시되어 실행된다 , 종료되면 실행컨텍스트에서 pop된다.
// 함수의 실행 순서는 실행 컨텍스트 스택으로 관리한다.
// 자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖는다 - 이는 두 개 이상의 함수를 동시에 실행할 수가 없다는 것을 의미한다.
// 싱글 스레드 방식으로 동작

// Timer example
{
    function timer(delay,callback){
        const delayUntil = Date.now() + delay;

        while(Date.now() < delayUntil);

        callback();
    }

    function foo(){
        console.log("foo");
    }
    function bar(){
        console.log("bar");
    }

    //timer(2000,foo);
    //bar(); //2초이상 호출되지 못하고 블로킹 된다.
}
// 현재 실행중인 테스크가 종료할 때 까지 다음 실행될 테스크가 대기하는 방식을 동기처리라고한다.
// 순서대로 하나씩 테스크를 처리하여 실행 순서가 보장 돤다는 장점이 있지만 , 앞의 작업이 모두 완료될 때까지 작업이 블로킹된다는 단점이 있다.

// 위의 예제를 비동기 방식으로 변환
{
    function foo(){
        console.log("foo");
    }
    function bar(){
        console.log("bar");
    }
    setTimeout(foo,3000); //3초후 foo호출
    bar(); //즉시 호출
}
// 현재 실행중인 테스크가 종료되지 않은 상태더라도 다음 테스크를 곧바로 실행하는 방식 - 비동기 방식
// 비동기 처리를 수행하는 비동기 함수는 전통적으로 콜백 패턴을 사용한다  - 콜백헬을 발생시켜 가독성 저하 => 프로미스를 통해 개선
// 타이머함수 , HTTP request, 이벤트 핸들러는 비동기 방식으로 동작한다. => 이벤트 처리는 이벤트 루프와 이벤트 루프와 테스크큐와 깊은관계가 있다.


// 이벤트 루프와 테스크 큐
// 싱글스레드 방식으로 동작하는 자바스크립트 - 한 번에 하나의 테스크만 처리
// 하지만 브라우저의 동작을 살펴보면 많은 테스크가 동시에 실행되는 것 처럼 보여진다.
// 이처럼 자바스크립트의 동시성을 지원하는 것이 이벤트 루프이다. - 이벤트 루프는 브라우저에 내장되어있는 기능이다.


//자바스크립트 엔진 - 크게 콜스택, 힙 두가지 영역으로 구분
// 콜스택 - 함수를 호출하면 실행 컨텍스트가 생성되어 순차적으로 콜스택에 푸시되어 순차적으로 실행된다.
// 힙 - 객체가 저장되는 메모리 공간 - 메모리에 값을 저장하려면 저장할 메모리 공간의 크기를 결정해야한다.
// 원시 값과 달리 객체는 크기가 정해져 있지 않다 - 런타임에 할당해야할 메모리공간의 크기를 결정


// 테스크 큐 - setTimeout, setInterval과 같은 타이머 함수의 비동기 콜백함수, 이벤트 핸들러가 보관되는 영역
// 마이크로 테스크큐  - Promise에 등록된 비동기 콜백함수 또는 mutation Observer라는 Web API에 등록된 콜백함수가 마이크로테스크큐에 저장된다.
// Animation Frames - Rendering 직전에 수행되어야할 콜백함수들이 저장된다.(1초에 60frame 만큼 랜더링)
//이벤트 루프 - Event Loop는 CallStack과 위에 정의된 3개의 큐들을 무한히 순회하면서 다음과 같은 규칙으로 실행된다.
//1. CallStack의 작업들이 모두 수행되어 비어질 때까지 Event Loop는 CallStack에 머물게 된다.
//2. Event Loop는 무한히 돌면서 1초에 60Frames에 맞춰 rendering를 수행하게 된다.
//3. MicrotaskQueue에 loop가 도달했을 경우 큐에 모든 작업을 하나씩 CallStack에 넣어 수행하며MicrotaskQueue가 모두 비어질때까지 수행하게 된다.
//4. Task Queue에 loop가 도달했을 경우 큐에서 하나의 작업만 CallStack로 가져가 수행하게 된다.

//example - 실행순서는?
{
    function foo(){
        console.log('foo');
    }
    function bar(){
        console.log('bar');
    }

    setTimeout(foo,0); //2 -> 실제로 4ms후에 foo함수가 호출된다.
    bar(); //1
}
// 실행순서 책 814p 참고

// 비동기 함수인 setTimeout의 콜백함수는 테스크 큐에 푸시되어 대기하다가 콜스택이 비게되면 비로서 콜스택에 푸시되어 실행된다.

// 자바스크립트 엔진과 브라우저가 협력하여 비동기처리를 만들어낸다.
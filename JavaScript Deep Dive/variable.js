/**
 * 변수
 */

// 전역변수의 문제점
//1. 암묵적 결합 - 모든 코드가 변수의 값을 참조하고 변경 할 수 있다. 변수의 유효범위가 클 수록 가독성은 나빠지고, 상태가 변경될 위험성이 크다.
//2. 긴 생명주기
//3. 스코프 체인 상의 종점에 존재 - 변수를 찾을 때 전역변수의 검색 속도가 가장 느리다.
//4. 네임스페이스 오염

// 전역변수의 사용을 억제하는 방법
//1. 즉시 실행 함수
{
    (function (){
        var foo = 10;
        // ...
    })();
    
     // console.log(foo); error
}

//2. 네임스페이스 객체 - 전역에 네임스페이스를 담당할 객체를 생성하고 전역변수처럼 사용
{
    var MyApp={} //전역 네임스페이스 객체

    MyApp.name='Lee';

    console.log(MyApp.name);
}


//3. 모듈패턴
// 관련있는 변수나 함수를 즉시실행함수로 감싸 하나의 모듈로 만든다.
// 클로저 기반으로 동작하고, 전역변수의 억제는 물론 캡슐화까지 구현 할 수 있다.
// 캡슐화 - 객체의 상태를 나타내는 프로퍼티와 동작을 나타내는 메서드를 하나로 묶는 것
// 정보은닉 - 특정 프로퍼티나 메서드를 감춘다.

{
    var Counter=(function(){
        var num=0;
        return {
            increase(){
                return ++num;
            },
            decrease(){
                return --num;
            }
        }
    })();

    console.log(Counter.name); //undefined
    console.log(Counter.increase());
    console.log(Counter.increase());
    console.log(Counter.decrease());
}



// var 키워드로 선언한 변수의 문제점
//1. 변수 중복선언 허용 - 앞서 선언한 변수가 의도치 않게 변경되는 문제점이 발생할 수 있다.
{
    var x=100;

    var x=250; //중복선언

    console.log(x); //250
}

//2. 함수레벨 스코프 - 블록레벨에서 var로 선언된 변수는 전역으로 취급된다.

//3. 변수 호이스팅 - 변수 선언문이 선두로 끌어올려진 것처럼 동장
// 실행 전 자바스크립트 엔진에 의해 변수가 생성되고, undefined가 할당된다.
// 변수 선언문 이전의 변수를 참조 가능하지만 프로그램 흐름에 맞지 않고 그로인해 가독성이 떨어진다.
{
    console.log(foo); //undefined
    var foo=150;
    console.log(foo); //150
}




// let 키워드 변수 선언 - var 단점을 보안하기 위해 새롭게 도입된 변수 선언 키워드

//1. 변수 중복 선언 금지

//2. 블록레벨 스코프

//3. 변수 호이스팅 발생 x
// 선언단계와 초기화 단계가 분리되어 실행된다. - 초기화 단께 이전에 변수에 접근하려하면 에러가 발생한다.
{
    // 런타암 이전에 변수의 선언단계가 이루어진다.

    //console.log(foo) - error 초기화 단계 이전
    let foo; // 초기화 단계 - undefined

    foo=10; // 할당단계

    console.log(foo);
}

// 호이스팅이 발생하지 않는 것 처럼 보이는 것 뿐
{
    let foo=1;
    {
        // console.log(foo); - error : 호이스팅이 발생하지 않는다면 전역의 foo가 출력되어야한다.
        // 사실 let const 선언은 런타임 이전에 이루어지지만 , 초기화가 분리되어 실행 흐름에 맞게 이루어진다.
        let foo=2;
    }
}

//4. 전역객체와 let
// var키워드로 선언한 전역변수와 전역함수는 전역객체 window객체의 프로퍼티가 된다.
{
    var a=10;
    function foo(){
        console.log(`window func foo`);
    }

    console.log(window.a);
    window.foo();
}
// let 키워드로 선언한 전역변수는 전역객체의 프로퍼티가 아니다.
// let 전역변수는 보이지 않는 블록내에 존재하게 된다.
{
    let xx=10;
    console.log(window.xx); //undefined
}


// const 키워드 변수선언 - 상수를 선언하기 위해 사용된다.
// 선언과 동시에 초기화되어야 한다.
//1. 재할당 금지
//2. 상수 - 상수는 상태유지와 가독성, 유지보수의 편의를 위해 적극적으로 활용해야한다.
// 상수 이름은 대문자 스네이크 케이스로 작성하는 것을 권장 ex) TAX_RATE
// 값을 재할당 하는 것은 불가능하지만, 객체의 프로퍼티 할당, 변경, 삭제는 가능하다.

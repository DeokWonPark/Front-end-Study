/**
 * 실행 컨텍스트
 * 자바스크립트가 실행될 때 생성되는 하나의 실행 단위
 * 콜스택 안에 들어가는 하나의 실행정보와 비슷하다.
 * 실행컨텍스트가 생성되는 3가지 경우 - 전역코드, eval()함수로 실행되는 코드, 함수안의 코드를 실행하는 경우
 * 대부분의 프로그래머는 함수로 실행컨텍스트를 만든다.
 */


// 실행 컨텍스트 생성과정
// 1. 활성객체 생성 - 실행컨텍스트가 생성되면 실행에 필요한 여러가지 정보를 담을 활성객체를 생성한다. - 객체에 사용하게될 매개변수나, 사용자 정의 변수를 저장 == 변수객체
// 2. argument객체 생성
// 3. 스코프 정보생성 - 현재 실행컨텍스트의 유효범위를 나타낸다.
// 스코프 체인이라는 리스트를 생성해서 현재 실행 컨텍스트의 변수와 상위 컨텍스트의 변수에 접근이 가능하다. [[scope]]
// 4. 변수 생성 - 실행 컨텍스트 내부에서 사용되는 지역변수의 생성
// 변수나 내부함수를 메모리에 생성하고 초기화는 실행전에 이루어지지 않는다.
// 표현식의 초가화 실행은 변수 객체 생성이 모두 이루어진 다음 시작된다.
// 5. this바인딩


// 스코프 체인
// 변수의 유효범위를 나타내는 스코프가 [[scope]]프로퍼티로 각 함수 객체 내에서 연결리스트형식으로 관리된다 == 스코프 체인
// 각각의 함수는 [[scope]] 프로퍼티로 자신이 생성된 실행 컨텍스트의 스코프체인을 참조한다.
// 함수가 실행되는 순간 실행 컨택스트는 만들어진다.
// 이 실행 컨택스튼는 실행된 함수의 [[scope]]프로퍼티를 기반으로 새로운 스코프체인을 만든다.
// 스코프체인 = 현재 실행 컨텍스트의 변수 객체 + 상위 컨텍스트의 스코프체인

//example
{
    var value="value1";

    function printValue(){
        return value;
    }

    function printFunc(func){
        var value="value2";
        console.log(func()); //value1
    }
    printFunc(printValue);
}

